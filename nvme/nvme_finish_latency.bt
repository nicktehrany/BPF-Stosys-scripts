/*
*
* Get NVMe latency of all reset calls.
*
*/

#include <linux/nvme.h>
#include <linux/blkdev.h>
#include <linux/blk-mq.h>

// TODO: REQ_OP_MASK does not work on all versions of BPFtrace, for now use 0xFF 

kprobe:nvme_setup_cmd  
{
    $nvme_cmd = (struct nvme_command *)*(arg1+sizeof(struct request));
    $opcode = (uint8)$nvme_cmd->rw.opcode;

    // Trace ZONE FINISH
    $cmd = (((struct request *)arg1)->cmd_flags & 0xFF);

    // If nvme device is in passthrough (e.g., qemu passthrough) Zone reset has flag REQ_OP_DRV_OUT
    // therefore include more checks on nvme_zone_mgnt_action
    if($cmd == REQ_OP_ZONE_FINISH || (($cmd == REQ_OP_DRV_OUT && $opcode == nvme_cmd_zone_mgmt_send) && $nvme_cmd->zms.zsa == NVME_ZONE_FINISH)) {
        @z_finish_ctr_map["F"] = count();
        @start[arg1] = nsecs;
    }
}

// We need to look for both batch and ordinary reqs.
kprobe:nvme_complete_batch_req 
/ @start[arg0] / 
{
    $nvme_cmd = (struct nvme_command *)*(arg0+sizeof(struct request));
    $opcode = (uint8)$nvme_cmd->rw.opcode;
    $cmd = (((struct request *)arg0)->cmd_flags & 0xFF);

    if($cmd == REQ_OP_ZONE_FINISH || (($cmd == REQ_OP_DRV_OUT && $opcode == nvme_cmd_zone_mgmt_send) && $nvme_cmd->zms.zsa == NVME_ZONE_FINISH)) {
        $cmdid = ((struct request *)arg0)->tag;
        $cmdtime = (nsecs - @start[arg0])/1000;

        // Update latency maps
        @hist_latency["F"]      = hist($cmdtime);
        @max_latency["F"]       = max($cmdtime);
        @average_latency["F"]   = avg($cmdtime);
        @count_finish["F"]      = count();
    }
}

// We need to look for both batch and ordinary reqs.
kprobe:nvme_complete_rq 
/ @start[arg0] / 
{
    $nvme_cmd = (struct nvme_command *)*(arg0+sizeof(struct request));
    $opcode = (uint8)$nvme_cmd->rw.opcode;
    $cmd = (((struct request *)arg0)->cmd_flags & 0xFF);

    if($cmd == REQ_OP_ZONE_FINISH || (($cmd == REQ_OP_DRV_OUT && $opcode == nvme_cmd_zone_mgmt_send) && $nvme_cmd->zms.zsa == NVME_ZONE_FINISH)) {
        $cmdid = ((struct request *)arg0)->tag;
        $cmdtime = (nsecs - @start[arg0])/1000;

        // Update latency maps
        @hist_latency["F"]      = hist($cmdtime);
        @max_latency["F"]       = max($cmdtime);
        @average_latency["F"]   = avg($cmdtime);
        @count_finish["F"]      = count();
    }
}

END {
    clear(@start);
}
